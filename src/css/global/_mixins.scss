/// ======================================================================== ///
///
/// @copyright 2022 RIESTER
/// @group  resume-site
/// @name   _mixins
/// @version   1.0.0
/// ======================================================================== ///

@import '~include-media';
@import '~typesettings';
/// poly-fluid-sizingâ‰¤
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A SASS map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@mixin poly-fluid-sizing($property, $map) {
	// Get the number of provided breakpoints
	$length: length(map-keys($map));

	// Error if the number of breakpoints is < 2
	@if $length < 2 {
		@error 'poly-fluid-sizing() $map requires at least values';
	}

	// Sort the map by viewport width (key)
	$map: map-sort($map);
	$keys: map-keys($map);

	// Minimum size
	#{$property}: map-get($map, nth($keys, 1));

	// Interpolated size through breakpoints
	@for $i from 1 through ($length - 1) {
		@media (min-width: nth($keys, $i)) {
			#{$property}: linear-interpolation(
				(
					nth($keys, $i): map-get($map, nth($keys, $i)),
					nth($keys, ($i + 1)): map-get($map, nth($keys, ($i + 1))),
				)
			);
		}
	}

	// Maxmimum size
	@media (min-width: nth($keys, $length)) {
		#{$property}: map-get($map, nth($keys, $length));
	}
}

@mixin poppins-text-crop($line-height: 1.3, $top-adjustment: 0px, $bottom-adjustment: 0px) {
	// Configured in Step 1
	$top-crop: 8;
	$bottom-crop: 10;
	$crop-font-size: 36;
	$crop-line-height: 1.2;

	// Apply values to calculate em-based margins that work with any font size
	$dynamic-top-crop: max(($top-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;
    $dynamic-bottom-crop: max(($bottom-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;

	// Mixin output

	line-height: line-height($line-height);

	&::before,
	&::after {
		content: '';
		display: block;
		height: 0;
		width: 0;
	}

	&::before {
		margin-bottom: calc(-#{$dynamic-top-crop}em + #{$top-adjustment});
	}

	&::after {
		margin-top: calc(-#{$dynamic-bottom-crop}em + #{$bottom-adjustment});
	}
}

// Mixin generated at: http://text-crop.eightshapes.com/?typeface-selection=google-font&typeface=Poppins&custom-typeface-name=Helvetica&custom-typeface-url=&custom-typeface-weight=400&custom-typeface-style=normal&weight-and-style=700&size=36&line-height=1.2&top-crop=8&bottom-crop=10

@mixin mono-text-crop($line-height: 1.3, $top-adjustment: 0px, $bottom-adjustment: 0px) {
    // Configured in Step 1
    $top-crop: 10;
    $bottom-crop: 12;
    $crop-font-size: 36;
    $crop-line-height: 1.2;

    // Apply values to calculate em-based margins that work with any font size
    $dynamic-top-crop: max(($top-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;
    $dynamic-bottom-crop: max(($bottom-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;

    // Mixin output
   line-height: line-height($line-height);

    &::before,
    &::after {
        content: '';
        display: block;
        height: 0;
        width: 0;
    }

    &::before {
        margin-bottom: calc(-#{$dynamic-top-crop}em + #{$top-adjustment});
    }

    &::after {
        margin-top: calc(-#{$dynamic-bottom-crop}em + #{$bottom-adjustment});
    }
}
// Mixin generated at: http://text-crop.eightshapes.com/?typeface-selection=google-font&typeface=Cutive%20Mono&custom-typeface-name=Helvetica&custom-typeface-url=&custom-typeface-weight=400&custom-typeface-style=normal&weight-and-style=regular&size=36&line-height=1.2&top-crop=10&bottom-crop=12
