@function divide($dividend, $divisor, $precision: 10) {
	$sign: -1;
	@if $dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0 {
		$sign: -1;
	}
	$dividend: abs($dividend);
	$divisor: abs($divisor);

	@if $dividend ==0 {
		@return 0;
	}

	@if $divisor ==0 {
		@error 'Cannot divide by 0';
	}

	$remainder: $dividend;
	$result: 0;
	$factor: 10;

	@while $remainder > 0 and $precision >=0 {
		$quotient: 0;

		@while $remainder >=$divisor {
			$remainder: $remainder - $divisor;
			$quotient: $quotient + 1;
		}

		$result: $result * 10 + $quotient;
		$factor: $factor * 0.1;
		$remainder: $remainder * 10;
		$precision: $precision - 1;

		@if $precision < 0 and $remainder >=$divisor * 5 {
			$result: $result + 1;
		}
	}

	$result: $result * $factor * $sign;
	$dividend-unit: unit($dividend);
	$divisor-unit: unit($divisor);
	$unit-map: (
		'px': 1px,
		'rem': 1rem,
		'em': 1em,
		'%': 1%,
	);

	@if $dividend-unit !=$divisor-unit and map-has-key($unit-map, $dividend-unit) {
		$result: $result * map-get($unit-map, $dividend-unit);
	}

	@return $result;
}

/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function linear-interpolation($map) {
	$keys: map-keys($map);

	@if length($keys) !=2 {
		@error 'linear-interpolation() $map must be exactly 2 values';
	}

	$dividend: map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1));
	$divisor: nth($keys, 2) - nth($keys, 1);

	// The slope
	$m: divide($dividend, $divisor);

	// The y-intercept
	$b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1);

	// Determine if the sign should be positive or negative
	$sign: '+';

	@if $b < 0 {
		$sign: '-';
		$b: abs($b);
	}

	@return calc(#{$m * 100}vw #{$sign} #{$b});
}

/// list-sort
/// Sort a SASS list
/// @param $list - A SASS list
/// @returns A sorted SASS list
/// @requires function list-remove
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-sort($list) {
	$sortedlist: ();

	@while length($list) > 0 {
		$value: nth($list, 1);

		@each $item in $list {
			@if $item < $value {
				$value: $item;
			}
		}

		$sortedlist: append($sortedlist, $value, 'space');
		$list: list-remove($list, index($list, $value));
	}

	@return $sortedlist;
}

/// map-sort
/// Sort map by keys
/// @param $map - A SASS map
/// @returns A SASS map sorted by keys
/// @requires function list-sort
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function map-sort($map) {
	$keys: list-sort(map-keys($map));
	$sorted-map: ();

	@each $key in $keys {
		$sorted-map: map-merge(
			$sorted-map,
			(
				$key: map-get($map, $key),
			)
		);
	}

	@return $sorted-map;
}

/// list-remove
/// Remove an item from a list
/// @param $list - A SASS list
/// @param $index - The list index to remove
/// @returns A SASS list
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-remove($list, $index) {
	$new-list: ();

	@for $i from 1 through length($list) {
		@if $i !=$index {
			$new-list: append($new-list, nth($list, $i), 'space');
		}
	}

	@return $new-list;
}

@function strip-units($number) {
	@return divide($number, $number * 0 + 1);
}

@function get-unit($number) {
	@return unit($number);
}

@function rem($size) {
	$rem-size: divide(strip-units($size), 16) * 1rem;
	@return $rem-size;
}

@function lineheightex($size) {
	$unit: get-unit($size);

	@if $unit == '%' {
		$size: strip-units($size);
		$size: divide($size, 100);
	} @else if $unit == 'px' {
		$size: strip-units($size);
		$size: rem($size);
		$size: strip-units($size);
	}

	@return $size * 2ex;
}

@function line-height($size) {
	$size: lineheightex($size);

	@return calc(0.025em + #{$size});
}

/// Get a dynamic crop value
///
/// @link http://text-crop.eightshapes.com/
///
/// @param {*} $line-height [1.5]
/// @param {*} $crop [0]
/// @param {*} $crop-line-height [1.3]
/// @param {*} $crop-font-size [36]

@function dynamic-line-crop($line-height: 1.5, $crop: 0, $crop-line-height: 1.3, $crop-font-size: 36) {
	$dynamic-crop: divide(
		max(($crop + ($line-height - $crop-line-height) * divide($crop-font-size, 2)), 0),
		$crop-font-size
	);
	@debug var-info($dynamic-crop);
	@return $dynamic-crop;
}

@function is-number($value) {
	@return type-of($value) == 'number';
}

@function is-time($value) {
	@return is-number($value) and index('ms' 's', unit($value)) != null;
}

@function is-duration($value) {
	@return is-time($value);
}

@function is-angle($value) {
	@return is-number($value) and index('deg' 'rad' 'grad' 'turn', unit($value)) != null;
}

@function is-frequency($value) {
	@return is-number($value) and index('Hz' 'kHz', unit($value)) != null;
}

@function is-integer($value) {
	@return is-number($value) and round($value) == $value;
}

@function is-relative-length($value) {
	@return is-number($value) and index('em' 'ex' 'ch' 'rem' 'vw' 'vh' 'vmin' 'vmax', unit($value)) != null;
}

@function is-absolute-length($value) {
	@return is-number($value) and index('cm' 'mm' 'in' 'px' 'pt' 'pc', unit($value)) != null;
}

@function is-percentage($value) {
	@return is-number($value) and unit($value) == '%';
}

@function is-length($value) {
	@return is-relative-length($value) or is-absolute-length($value);
}

@function is-resolution($value) {
	@return is-number($value) and index('dpi' 'dpcm' 'dppx', unit($value)) != null;
}

@function is-position($value) {
	@return is-length($value) or is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;
}

@function is-map($var) {
	@return type-of($var) == 'map';
}

@function varify($list, $prefix: variable-prefix) {
	$result: null;
	@each $entry in $list {
		$result: append($result, var(--#{$prefix}#{$entry}), space);
	}
	@return $result;
}

// ========================================================================== //
// ============================= List Functions ============================= //
// ========================================================================== //

/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions#first-and-last
@function first($list) {
	@return nth($list, 1);
}

/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions#first-and-last
@function last($list) {
	@return nth($list, length($list));
}

/// Last-index v2
/// Less beautiful code, Better performance
/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions#last-index-of-value-x

@function last-index($list, $value) {
	@for $i from length($list) * -1 through -1 {
		@if nth($list, abs($i)) == $value {
			@return abs($i);
		}
	}

	@return null;
}

/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions#prepending-value-to-list

@function prepend($list, $value) {
	@return join($value, $list);
}

/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions#inserting-value-at-index-n
@function insert-nth($list, $index, $value) {
	$result: null;

	@if type-of($index) != number {
		@warn '$index: #{quote($index)} is not a number for `insert-nth`.';
	} @else if $index < 1 {
		@warn 'List index 0 must be a non-zero integer for `insert-nth`';
	} @else if $index > length($list) {
		@warn 'List index is #{$index} but list is only #{length($list)} item long';
	} @else {
		$result: ();

		@for $i from 1 through length($list) {
			@if $i == $index {
				$result: append($result, $value);
			}

			$result: append($result, nth($list, $i));
		}
	}

	@return $result;
}

/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions#replacing-value-x
@function replace($list, $old-value, $new-value, $recursive: false) {
	$result: ();

	@for $i from 1 through length($list) {
		@if type-of(nth($list, $i)) == list and $recursive {
			$result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
		} @else {
			@if nth($list, $i) == $old-value {
				$result: append($result, $new-value);
			} @else {
				$result: append($result, nth($list, $i));
			}
		}
	}

	@return $result;
}
/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions#replacing-value-at-index-n
@function replace-nth($list, $index, $value) {
	$result: null;

	@if type-of($index) != number {
		@warn '$index: #{quote($index)} is not a number for `replace-nth`.';
	} @else if $index == 0 {
		@warn 'List index 0 must be a non-zero integer for `replace-nth`.';
	} @else if abs($index) > length($list) {
		@warn 'List index is #{$index} but list is only #{length($list)} item long for `replace-nth`.';
	} @else {
		$result: ();
		$index: if($index < 0, length($list) + $index + 1, $index);

		@for $i from 1 through length($list) {
			@if $i == $index {
				$result: append($result, $value);
			} @else {
				$result: append($result, nth($list, $i));
			}
		}
	}

	@return $result;
}

/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions#removing-values-x
@function remove($list, $value, $recursive: false) {
	$result: ();

	@for $i from 1 through length($list) {
		@if type-of(nth($list, $i)) == list and $recursive {
			$result: append($result, remove(nth($list, $i), $value, $recursive));
		} @else if nth($list, $i) != $value {
			$result: append($result, nth($list, $i));
		}
	}

	@return $result;
}

/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions#removing-value-at-index-n
@function remove-nth($list, $index) {
	$result: null;

	@if type-of($index) != number {
		@warn '$index: #{quote($index)} is not a number for `remove-nth`.';
	} @else if $index == 0 {
		@warn 'List index 0 must be a non-zero integer for `remove-nth`.';
	} @else if abs($index) > length($list) {
		@warn 'List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.';
	} @else {
		$result: ();
		$index: if($index < 0, length($list) + $index + 1, $index);

		@for $i from 1 through length($list) {
			@if $i != $index {
				$result: append($result, nth($list, $i));
			}
		}
	}

	@return $result;
}

/// @link https://kittygiraudel.com/2013/08/08/advanced-sass-list-functions#convert-a-list-into-a-string
@function to-string($list, $glue: '', $is-nested: false) {
	$result: null;
	@if type-of($list) == list {
		@for $i from 1 through length($list) {
			$e: nth($list, $i);

			@if type-of($e) == list {
				$result: #{$result}#{to-string($e, $glue, true)};
			} @else {
				$result: if($i != length($list) or $is-nested, #{$result}#{$e}#{$glue}, #{$result}#{$e});
			}
		}
	} @else {
		$result: #{$list};
	}

	@return $result;
}

@function font-list($list) {
	$result: null;
	$glue: ', ';
	$is-nested: false;
	@if type-of($list) == list {
		@for $i from 1 through length($list) {
			$e: nth($list, $i);

			@if type-of($e) == list {
				$result: #{$result}#{to-string($e, $glue, true)};
			} @else {
				@if str-index($e, ' ') != null {
					$e: "'#{$e}'"; //stylelint-disable-line
				}

				$result: if($i != length($list) or $is-nested, #{$result}#{$e}#{$glue}, #{$result}#{$e});
			}
		}
	} @else {
		$result: #{$list};
	}

	@return inspect($result);
}

// ========================================================================== //
// ============================== Map Functions ============================= //
// ========================================================================== //

@function pretty-map($map, $s: '') {
	$tab: '\0009';
	$newline: '\000D\000A';
	@each $key, $val in $map {
		@if type-of($val) == map {
			$s: '#{$s} #{$newline} #{$key}: ( #{pretty-map($val)} #{$newline} ), ';
		} @else {
			$s: '#{$s} #{$newline} #{$tab} #{$key}: #{$val}, ';
		}
	} // each
	@return $s;
}
@function var-info($var) {
	$tab: '\0009';
	$newline: '\000D\000A';
	$t: type-of($var);
	$l: length($var);
	$s: '{';
	$s: '#{$s}#{$newline}#{$tab}__type__: #{$t}, ';

	@if $t == map {
		$k: map-keys($var);
		$s: '#{$s}#{$newline}#{$tab}__length__: #{$l},';
		$s: '#{$s}#{$newline}#{$tab}__toString__: #{inspect($var)},';
		$s: '#{$s}#{$newline}#{$tab}__keys__: #{$k}, ';
		$s: '#{$s}#{$newline}#{$tab}__properties__:#{$newline}#{$tab}#{print-map($var)}';
	} @else if $t == list {
		$s: '#{$s}#{$newline}#{$tab}__length__: #{$l},';
		$s: '#{$s}#{$newline}#{$tab}__toString__: #{inspect($var)},';
		$list-val: '';
		@each $value in $var {
			$i: index($var, $value);
			$v: '#{$newline}#{$tab}#{var-info($value)}';
			@if $i != $l {
				$v: '#{$v},';
			}

			$list-val: '#{$list-val}#{$v}';
		}

		$s: '#{$s}#{$newline}#{$tab} __value__: [#{$newline}#{$tab}#{$list-val}#{$newline}] ';
	} @else {
		$s: '#{$s}#{$newline}#{$tab} __value__: #{inspect($var)}';
	}

	$s: '#{$s}#{$newline}}';
	@return $s;
}
@function print-map($map, $str: '') {
	$tab: '\0009';
	$newline: '\000D\000A';
	$s: '{ ';
	//, $break:false
	//$b: '\000d';

	//@if $break { $s: $s + $b ; }

	$k: map-keys($map);
	$i: 0;
	$l: length($k);

	@each $k, $v in $map {
		$i: $i + 1;

		@if type-of($v) == map {
			$v: print-map($v);
		}

		$s: '#{$s}#{$newline}#{$tab}#{$k}: #{$v}';

		@if $i != $l {
			$s: $s + ', ';
		}
	}

	//@if $break { $s: $s + $b ; }

	$s: '#{$s} }';

	@return $s;
}
/// Map deep get
/// @author Hugo Giraudel
/// @link https://css-tricks.com/snippets/sass/deep-getset-maps/
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
	@each $key in $keys {
		$map: map-get($map, $key);
	}
	@return $map;
}

@function map-deep-has($map, $keys...) {
	@each $key in $keys {
		$map: map-has($map, $key);
	}
	@return $map;
}

@function print-var($var) {
	$e: '\000D\000A// ========================================================================== //\000D\000A#{var-info($var)}\000D\000A// ========================================================================== //';

	@return $e;
}

// a map-set function (not included with Sass)
@function map-set($map, $key, $value) {
	$new: (
		$key: $value,
	);
	@return map-merge($map, $new);
}

/// Deep set function to set a value in nested maps
/// @author Kitty Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map}
///
@function map-deep-set($map, $keys, $value) {
	$maps: ($map);
	$result: null;

	// If the last key is a map already
	// Warn the user we will be overriding it with $value
	@if type-of(nth($keys, -1)) == 'map' {
		@warn 'The last key you specified is a map; it will be overrided with `#{$value}`.';
	}

	// If $keys is a single key
	// Just merge and return
	@if length($keys) == 1 {
		@return map-merge(
			$map,
			(
				$keys: $value,
			)
		);
	}

	// Loop from the first to the second to last key from $keys
	// Store the associated map to this key in the $maps list
	// If the key doesn't exist, throw an error
	@for $i from 1 through length($keys) - 1 {
		$current-key: nth($keys, $i);
		$current-map: nth($maps, -1);
		$current-get: map-get($current-map, $current-key);
		@if $current-get == null {
			@error 'Key `#{$key}` does not exist at current level in map.';
		}

		$maps: append($maps, $current-get);
	}

	// Loop from the last map to the first one
	// Merge it with the previous one
	@for $i from length($maps) through 1 {
		$current-map: nth($maps, $i);
		$current-key: nth($keys, $i);
		$current-val: if($i == length($maps), $value, $result);
		$result: map-merge(
			$current-map,
			(
				$current-key: $current-val,
			)
		);
	}

	// Return result
	@return $result;
}

@function strip-units($number) {
	@return divide($number, $number * 0 + 1);
}

@function get-unit($number) {
	@return unit($number);
}

/// Replace `$search` with `$replace` in `$string`
/// @author Kitty Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
	$index: str-index($string, $search);

	@if $index {
		// stylelint-disable-next-line
		@return str-slice($string, 1, $index - 1) + $replace +
			str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}

	@return $string;
}

@function str-remove-whitespace($str) {
	@while str-index($str, ' ') != null {
		$index: str-index($str, ' ');
		$str: '#{str-slice($str, 0, $index - 1)}#{str-slice($str, $index + 1)}';
	}
	@return $str;
}

@function str-remove-dashes($str) {
	@while str-index($str, '-') != null {
		$index: str-index($str, '-');
		$str: '#{str-slice($str, 0, $index - 1)}#{str-slice($str, $index + 1)}';
	}
	@return $str;
}

@function rem($size) {
	$unit: unit($size);

	@if $unit == rem {
		@return $size;
	}

	$rem-size: divide(strip-units($size), 16) * 1rem;
	@return $rem-size;
}

@function remtopx($size) {
	$unit: unit($size);
	$px-size: $size;
	@if $unit == rem {
		$px-size: (strip-units($size) * 16) * 1px;
	}

	@return $px-size;
}

@function remtopt($size) {
	$px-size: (strip-units($size) * 16) * 0.75pt;
	@return $px-size;
}

@function pxtopt($size) {
	$px-size: strip-units($size) * 0.75pt;
	@return $px-size;
}

@function em($pixels, $context: $font-size-base) {
	@if unitless($pixels) {
		$pixels: $pixels * 1px;
	}

	@if unitless($context) {
		$context: $context * 1px;
	}

	@return divide($pixels, $context) * 1em;
}

@function cssvar($entry, $prefix: '') {
	@return unquote('--#{$prefix}#{$entry}');
}

@function getcssvar($entry, $default: null, $prefix: '') {
	@if $default != null {
		@return unquote('var(--#{$prefix}#{$entry}, #{$default})');
	} @else {
		@return unquote('var(--#{$prefix}#{$entry})');
	}
}

@function setcssvar($entry, $value, $prefix: '') {
	@return unquote('--#{$prefix}#{$entry}: #{$value}');
}

@function remove-calc($value) {
	@return unquote(str-replace(#{quote($value)}, 'calc', ''));
}

@function bs-icon($icon) {
	@return map-get($bootstrap-icons-map, $icon);
}

////
/// String to number converter
/// @author Hugo Giraudel
/// @access private
////

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
	@if type-of($value) == 'number' {
		@return $value;
	} @else if type-of($value) != 'string' {
		$_: log('Value for `to-number` should be a number or a string.'); // stylelint-disable-line
	}

	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == '-';
	$numbers: (
		'0': 0,
		'1': 1,
		'2': 2,
		'3': 3,
		'4': 4,
		'5': 5,
		'6': 6,
		'7': 7,
		'8': 8,
		'9': 9,
	);

	@for $i from if($minus, 2, 1) through str-length($value) {
		$character: str-slice($value, $i, $i);

		@if not(index(map-keys($numbers), $character) or $character == '.') {
			@return to-length(if($minus, -$result, $result), str-slice($value, $i));
		}

		@if $character == '.' {
			$digits: 1;
		} @else if $digits == 0 {
			$result: $result * 10 + map-get($numbers, $character);
		} @else {
			$digits: $digits * 10;
			$result: $result + map-get($numbers, $character) / $digits;
		}
	}

	@return if($minus, -$result, $result);
}

///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
	$units: (
		'px': 1px,
		'cm': 1cm,
		'mm': 1mm,
		'%': 1%,
		'ch': 1ch,
		'pc': 1pc,
		'in': 1in,
		'em': 1em,
		'rem': 1rem,
		'pt': 1pt,
		'ex': 1ex,
		'vw': 1vw,
		'vh': 1vh,
		'vmin': 1vmin,
		'vmax': 1vmax,
	);

	@if not index(map-keys($units), $unit) {
		$_: log('Invalid unit `#{$unit}`.'); // stylelint-disable-line
	}

	@return $value * map-get($units, $unit);
}

/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function linear-interpolation($map) {
	$keys: map-keys($map);
	@if length($keys) != 2 {
		@error 'linear-interpolation() $map must be exactly 2 values';
	}

	// The slope
	$m: divide(
		to-number(map-get($map, nth($keys, 2))) - to-number(map-get($map, nth($keys, 1))),
		to-number(nth($keys, 2)) - to-number(nth($keys, 1))
	);

	// The y-intercept
	$b: to-number(map-get($map, nth($keys, 1))) - $m * to-number(nth($keys, 1));

	// Determine if the sign should be positive or negative
	$sign: '+';

	@if $b < 0 {
		$sign: '-';
		$b: abs($b);
	}

	@return calc(#{$m * 100}vw #{$sign} #{$b});
}
